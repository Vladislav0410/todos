{"version":3,"sources":["context.js","Todo/TodoItem.js","Todo/TodoList.js","Todo/AddTodo.js","Loader.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","TodoItem","todo","index","onChange","removeTodo","useContext","classes","completed","push","className","join","type","checked","id","title","onClick","bind","TodoList","props","todos","map","onToggle","AddTodo","onCreate","input","defaultValue","useState","value","setValue","event","target","clear","useInputValue","style","marginBottom","onSubmit","preventDefault","trim","display","justifyContent","margin","App","setTodos","loading","setLoading","useEffect","a","parseInt","prompt","fetch","then","response","json","setTimeout","Number","filter","length","Provider","concat","Date","now","Loader","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.44e3b021.chunk.js","sourcesContent":["import React from 'react'\n\nconst Context = React.createContext()\n\nexport default Context\n","import React, { useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport Context from '../context'\n\nfunction TodoItem({ todo, index, onChange }) {\n  const { removeTodo } = useContext(Context)\n  const classes = []\n\n  if (todo.completed) {\n    classes.push('done')\n  }\n\n  return (\n    <li>\n      <span className={classes.join(' ')}>\n        <input\n          type='checkbox'\n          checked={todo.completed}\n          onChange={() => onChange(todo.id)}\n        />\n        <strong>{index + 1}</strong>\n        &nbsp;\n        {todo.title}\n      </span>\n\n      <button className='rm' onClick={removeTodo.bind(null, todo.id)}>\n        &times;\n      </button>\n    </li>\n  )\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.object.isRequired,\n  index: PropTypes.number,\n  onChange: PropTypes.func.isRequired\n}\n\nexport default TodoItem\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport TodoItem from './TodoItem'\n\nfunction TodoList(props) {\n  return (\n    <ul>\n      {props.todos.map((todo, index) => {\n        return (\n          <TodoItem\n            todo={todo}\n            key={todo.id}\n            index={index}\n            onChange={props.onToggle}\n          />\n        )\n      })}\n    </ul>\n  )\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onToggle: PropTypes.func.isRequired\n}\n\nexport default TodoList\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nfunction useInputValue(defaultValue = '') {\n  const [value, setValue] = useState(defaultValue)\n\n  return {\n    bind: {\n      value,\n      onChange: event => setValue(event.target.value)\n    },\n    clear: () => setValue(''),\n    value: () => value\n  }\n}\n\nfunction AddTodo({ onCreate }) {\n  const input = useInputValue('')\n\n  function submitHandler(event) {\n    event.preventDefault()\n\n    if (input.value().trim()) {\n      onCreate(input.value())\n      input.clear()\n    }\n  }\n\n  return (\n    <form style={{ marginBottom: '1rem' }} onSubmit={submitHandler}>\n      <input {...input.bind} />\n      <button type='submit' className='addBtn'>Add</button>\n    </form>\n  )\n}\n\nAddTodo.propTypes = {\n  onCreate: PropTypes.func.isRequired\n}\n\nexport default AddTodo\n","import React from 'react'\n\nexport default () => (\n  <div style={{ display: 'flex', justifyContent: 'center', margin: '.5rem' }}>\n    <div className='lds-dual-ring' />\n  </div>\n)\n","import React, { useEffect } from 'react'\nimport TodoList from './Todo/TodoList'\nimport Context from './context'\nimport AddTodo from './Todo/AddTodo'\nimport Loader from './Loader'\n\nfunction App() {\n  const [todos, setTodos] = React.useState([])\n  const [loading, setLoading] = React.useState(true)\n\n  useEffect(() => {\n    const a = parseInt(prompt('How todos you want see'), 10)\n    fetch(`https://jsonplaceholder.typicode.com/todos?_limit=${a}`)\n      .then(response => response.json())\n      .then(todos => {\n        setTimeout(() => {\n          setTodos(todos)\n          setLoading(false)\n        }, 1500)\n      })\n  }, [])\n\n  function toggleTodo(id) {\n    setTodos(\n      todos.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed\n        }\n        return todo\n      })\n    )\n  }\n\n  function removeTodo(id) {\n    setTodos(todos.filter(todo => todo.id !== id))\n  }\n\n  function clearTodo(id) {\n    setTodos(todos.filter(todo => \"\"))\n  }\n\n  function addTodo(title) {\n    setTodos(\n      todos.concat([\n        {\n          title,\n          id: Date.now(),\n          completed: false\n        }\n      ])\n    )\n  }\n\n  const Number = (todos.filter(todos => todos.completed === false).length)\n\n  return (\n    <Context.Provider value={{ removeTodo }}>\n      <div className='wrapper'>\n        <h1>My To-Do List </h1>\n        {todos.length ? (\n          <h2>Number of To-Dos are not completed: {Number}</h2>\n        ) : loading ? null : (\n          <h2>No To-Do!</h2>\n        )}\n        <AddTodo onCreate={addTodo} />\n        {loading && <Loader />}\n        {todos.length ? (\n          <div>\n            <TodoList todos={todos} onToggle={toggleTodo} />\n            <button onClick={clearTodo}>Clear</button>\n          </div>\n        ) : loading ? null : (\n          null\n        )}\n\n      </div>\n    </Context.Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}